#include <bits/stdc++.h>
using namespace std;
// Number of vertices in the graph
#define V 28
 
// A utility function to find the vertex with minimum
// distance value, from the set of vertices not yet included
// in shortest path tree
int minDistance(int dist[], bool sptSet[])
{
    // Initialize min value
    int min = INT_MAX, min_index;
    for (int i = 0; i < V; i++)
        if (sptSet[i] == false && dist[i] <= min)
            min = dist[i], min_index = i;
    return min_index;
}
 
// Function to print shortest path from source to j using
// parent array
void printPath(int parent[], int j)
{
    // Base Case : If j is source
    if (parent[j] == -1)
        return;
    printPath(parent, parent[j]);
    cout << j << " ";
}
 
// A utility function to print the constructed distance
// array
int printSolution(int dist[], int n, int parent[])
{
    int src = 0;
    cout << "Vertex\t Distance\tPath";
    for (int i = 1; i < V; i++) {
        printf("\n%d -> %d \t\t %d\t\t%d ", src, i, dist[i],
               src);
        printPath(parent, i);
    }
}
 
// Function that implements Dijkstra's single source
// shortest path algorithm for a graph represented using
// adjacency matrix representation
void dijkstra(int graph[V][V], int src)
{
    // The output array. dist[i] will hold the shortest
    // distance from src to i
    int dist[V];
 
    // sptSet[i] will true if vertex i is included / in
    // shortest path tree or shortest distance from src to i
    // is finalized
    bool sptSet[V] = { false };
 
    // Parent array to store shortest path tree
    int parent[V] = { -1 };
 
    // Initialize all distances as INFINITE
    for (int i = 0; i < V; i++)
        dist[i] = INT_MAX;
 
    // Distance of source vertex from itself is always 0
    dist[src] = 0;
 
    // Find shortest path for all vertices
    for (int count = 0; count < V - 1; count++) {
        // Pick the minimum distance vertex from the set of
        // vertices not yet processed. u is always equal to
        // src in first iteration.
        int u = minDistance(dist, sptSet);
        // Mark the picked vertex as processed
        sptSet[u] = true;
        // Update dist value of the adjacent vertices of the
        // picked vertex.
        for (int v = 0; v < V; v++)
            // Update dist[v] only if is not in sptSet,
            // there is an edge from u to v, and total
            // weight of path from src to v through u is
            // smaller than current value of dist[v]
            if (!sptSet[v] && graph[u][v]
                && dist[u] + graph[u][v] < dist[v]) {
                parent[v] = u;
                dist[v] = dist[u] + graph[u][v];
            }
    }
    // print the constructed distance array
    printSolution(dist, V, parent);
}
 
// Driver Code
int main()
{
    // Let us create the example graph discussed above
       int graph[V][V] = { {00,25,00,00,00,00,00,00,50,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
			 {25,00,30,05,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
			 {00,30,00,10,10,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,10,00},
			 {05,00,00,00,05,10,05,00,00,20,15,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
             {00,10,00,05,00,05,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,10},
			 {00,00,05,10,00,00,05,05,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,05},
			 {00,00,00,05,00,05,00,05,00,00,00,00,00,00,00,00,40,00,00,00,00,00,00,00,00,00,00,00},
			 {00,00,00,00,00,05,05,00,00,00,23,00,00,00,00,00,00,20,00,00,00,00,00,00,00,00,00,00},
			 {05,00,00,00,05,10,05,00,00,20,15,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
			 {50,00,00,20,00,00,00,00,20,00,30,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
			 {00,00,00,15,00,00,00,00,15,30,00,10,70,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},        		
			 {00,00,00,00,00,00,00,00,00,00,10,00,00,35,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
			 {00,00,00,50,00,00,00,00,50,00,70,35,00,15,20,00,00,00,00,00,00,00,00,00,00,00,00,00},
			 {00,00,00,00,00,00,00,00,00,00,00,00,15,00,05,02,00,00,00,00,00,00,00,00,00,00,00,00},
			 {00,00,00,00,00,00,40,00,00,00,00,00,20,05,00,00,02,00,00,00,00,00,00,00,00,00,00,00},
			 {00,00,00,00,00,00,00,00,00,00,00,00,00,02,00,00,15,80,00,00,00,00,00,00,00,00,00,00},
			 {00,00,00,00,00,00,00,00,00,00,00,00,00,00,02,15,00,20,00,00,00,00,00,00,00,00,00,00},
			 {00,00,00,00,00,00,00,20,00,00,00,00,00,00,00,80,20,00,20,00,00,100,00,23,00,00,00,00},
			 {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,20,00,70,00,00,00,00,00,00,00,00},
			 {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,70,00,00,00,00,00,00,00,00,00},
			 {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15,00,00,00,00,00,00},
			 {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,15,00,25,00,00,00,00,00},
			 {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,25,00,00,00,00,00,00},
			 {00,00,00,00,00,00,00,10,00,00,00,00,00,00,00,00,23,00,00,00,00,00,00,00,05,00,00,00},
			 {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,05,00,05,00,00},
			 {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,05,00,00,00},
			 {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
			 {00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00,00},
			};
    dijkstra(graph, 0);
    return 0;
}
#include <iostream>
#include <vector>
#include <climits>
#include <iomanip>
using namespace std;

// Recursive function to print path of given vertex `u` from source vertex `v`
void printPath(vector<vector<int> > const &path, int v, int u)
{
    if (path[v][u] == v) {
        return;
    }
    printPath(path, v, path[v][u]);
    cout << path[v][u] << ", ";
}

// Function to print the shortest cost with path information between
// all pairs of vertices
void printSolution(vector<vector<int> > const &cost, vector<vector<int> > const &path)
{
    int n = cost.size();
    for (int v = 0; v < n; v++)
    {
        for (int u = 0; u < n; u++)
        {
            if (u != v && path[v][u] != -1)
            {
                cout << "The shortest path from " << v << " —> " << u << " is ["
                    << v << ", ";
                printPath(path, v, u);
                cout << u << "]" << endl;
            }
        }
    }
}

// Function to run the Floyd–Warshall algorithm
void floydWarshall(vector<vector<int> > const &adjMatrix)
{
    // total number of vertices in the `adjMatrix`
    int n = adjMatrix.size();

    // base case
    if (n == 0) {
        return;
    }

    // cost[] and path[] stores shortest path
    // (shortest cost/shortest route) information
    vector<vector<int> > cost(n, vector<int>(n));
    vector<vector<int> > path(n, vector<int>(n));

    // initialize cost[] and path[]
    for (int v = 0; v < n; v++)
    {
        for (int u = 0; u < n; u++)
        {
            // initially, cost would be the same as the weight of the edge
            cost[v][u] = adjMatrix[v][u];

            if (v == u) {
                path[v][u] = 0;
            }
            else if (cost[v][u] != INT_MAX) {
                path[v][u] = v;
            }
            else {
                path[v][u] = -1;
            }
        }
    }

    // run Floyd–Warshall
    for (int k = 0; k < n; k++)
    {
        for (int v = 0; v < n; v++)
        {
            for (int u = 0; u < n; u++)
            {
                // If vertex `k` is on the shortest path from `v` to `u`,
                // then update the value of cost[v][u] and path[v][u]

                if (cost[v][k] != INT_MAX && cost[k][u] != INT_MAX
                    && cost[v][k] + cost[k][u] < cost[v][u])
                {
                    cost[v][u] = cost[v][k] + cost[k][u];
                    path[v][u] = path[k][u];
                }
            }

            // if diagonal elements become negative, the
            // graph contains a negative-weight cycle
            if (cost[v][v] < 0)
            {
                cout << "Negative-weight cycle found!!";
                return;
            }
        }
    }

    // Print the shortest path between all pairs of vertices
    printSolution(cost, path);
}

int main()
{
    // define infinity
    int I = INT_MAX;

    // given adjacency representation of the matrix
    vector<vector<int> > adjMatrix =
    (
        { 0, I, -2, I },
        { 4, 0, 3, I },
        { I, I, 0, 2 },
        { I, -1, I, 0 }
    );

    // Run Floyd–Warshall algorithm
    floydWarshall(adjMatrix);

    return 0;
}
